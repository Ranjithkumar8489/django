 usd_balance = buy_exchange.fetch_balance()['USD']['free']
        if amount * min_ask_price > usd_balance:
            print(f"Insufficient USD balance on {min_ask_exchange} for buying {amount} {symbol}. Aborting arbitrage.")
            return 0

------------------------------------------------------------------------

# trading_stats/models.py

from django.db import models
import datetime

class TradeStats(models.Model):
    date = models.DateField(unique=True)
    total_trades = models.IntegerField(default=0)
    daily_trades = models.IntegerField(default=0)
    weekly_trades = models.IntegerField(default=0)
    monthly_trades = models.IntegerField(default=0)
    yearly_trades = models.IntegerField(default=0)

    def __str__(self):
        return f"Trade Stats for {self.date}"

    @classmethod
    def reset_counts(cls):
        today = datetime.date.today()

        # Reset daily trade count every day
        cls.objects.filter(date=today).update(daily_trades=0)

        # Reset weekly trade count every Monday
        if today.weekday() == 0:  # Monday is 0, Sunday is 6
            cls.objects.filter(date__week=today.isocalendar()[1]).update(weekly_trades=0)

        # Reset monthly trade count on the 1st of each month
        if today.day == 1:
            cls.objects.filter(date__month=today.month).update(monthly_trades=0)

        # Reset yearly trade count on January 1st
        if today.month == 1 and today.day == 1:
            cls.objects.filter(date__year=today.year).update(yearly_trades=0)


# trading_stats/utils.py

import datetime
from .models import TradeStats

def update_trade_counts():
    today = datetime.date.today()

    # Get or create TradeStats object for today's date
    trade_stats, created = TradeStats.objects.get_or_create(date=today)

    # Update total trade count
    trade_stats.total_trades += 1

    # Update daily trade count
    trade_stats.daily_trades += 1

    # Update weekly trade count if new week starts
    week_number = today.isocalendar()[1]
    if trade_stats.weekly_trades == 0 or trade_stats.date.isocalendar()[1] != week_number:
        trade_stats.weekly_trades += 1

    # Update monthly trade count if new month starts
    if trade_stats.monthly_trades == 0 or trade_stats.date.month != today.month:
        trade_stats.monthly_trades += 1

    # Update yearly trade count if new year starts
    if trade_stats.yearly_trades == 0 or trade_stats.date.year != today.year:
        trade_stats.yearly_trades += 1

    # Save updated trade stats
    trade_stats.save()

    # Check and perform resets
    TradeStats.reset_counts()

# trading_stats/views.py

from .utils import update_trade_counts
from .models import TradeStats

def arbitrage(symbol, amount, exchanges):
    try:
        min_ask_price = float('inf')
        max_bid_price = 0
        min_ask_exchange = None
        max_bid_exchange = None

        for exchange_name in exchanges:
            exchange = exchange_objects.get(exchange_name)
            if not exchange:
                print(f"Exchange '{exchange_name}' not found. Skipping.")
                continue

            try:
                ticker = exchange.fetch_ticker(symbol)
                if not ticker:
                    print(f"Failed to fetch ticker for {symbol} on {exchange_name}. Skipping.")
                    continue

                bid_price = ticker['bid']
                ask_price = ticker['ask']

                if ask_price < min_ask_price:
                    min_ask_price = ask_price
                    min_ask_exchange = exchange_name

                if bid_price > max_bid_price:
                    max_bid_price = bid_price
                    max_bid_exchange = exchange_name

            except Exception as fetch_error:
                print(f"Error fetching ticker for {symbol} on {exchange_name}: {fetch_error}")
                continue

        if not min_ask_exchange or not max_bid_exchange:
            print("Could not find suitable exchanges for arbitrage.")
            return 0

        print(f"Buy from {min_ask_exchange} at {min_ask_price} and sell on {max_bid_exchange} at {max_bid_price}")

        buy_exchange = exchange_objects[min_ask_exchange]
        sell_exchange = exchange_objects[max_bid_exchange]

        # Check exchange balances and amount
        usd_balance = buy_exchange.fetch_balance()['USD']['free']
        if amount * min_ask_price > usd_balance:
            print(f"Insufficient USD balance on {min_ask_exchange} for buying {amount} {symbol}. Aborting arbitrage.")
            return 0

        # Execute buy order
        buy_order = buy_exchange.create_limit_buy_order(symbol, amount, min_ask_price)
        if not buy_order:
            print(f"Buy order on {min_ask_exchange} failed. Aborting arbitrage.")
            return 0

        print(f"Buy order placed on {min_ask_exchange} successfully.")

        # Execute sell order
        sell_order = sell_exchange.create_limit_sell_order(symbol, amount, max_bid_price)
        if not sell_order:
            print(f"Sell order on {max_bid_exchange} failed. Aborting arbitrage.")
            return 0

        print(f"Sell order placed on {max_bid_exchange} successfully.")

        # Update trade counts in the database
        update_trade_counts()

        # Calculate profit
        buy_total = min_ask_price * amount
        sell_total = max_bid_price * amount
        profit = sell_total - buy_total

        print("Arbitrage successful!")
        return {
            'profit': profit,
            'buy_order_details': {
                'exchange': min_ask_exchange,
                'order': buy_order
            },
            'sell_order_details': {
                'exchange': max_bid_exchange,
                'order': sell_order
            }
        }

    except Exception as e:
        print(f"Error during arbitrage: {e}")
        return 0

