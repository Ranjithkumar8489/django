from django.db import models
from django.contrib.auth.models import User
from datetime import timedelta
from django.utils import timezone

class Payment(models.Model):
    PAYMENT_TYPES = [
        ('CC', 'Credit Card'),
        ('DC', 'Debit Card'),
        ('PP', 'PayPal'),
        # Add more payment types as needed
    ]

    payment_type = models.CharField(max_length=2, choices=PAYMENT_TYPES)
    amount = models.DecimalField(max_digits=10, decimal_places=2)
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    date = models.DateTimeField(default=timezone.now)  # Default to current date and time
    expiry_date = models.DateTimeField(blank=True, null=True)

    def __str__(self):
        return f'{self.user} - {self.payment_type} - {self.amount}'

    def save(self, *args, **kwargs):
        trading_settings = TradingSettings.objects.filter(user=self.user).first()
        if trading_settings:
            if not self.expiry_date:
                if trading_settings.subscription_type == 'M':
                    subscription_period = timedelta(days=30)
                elif trading_settings.subscription_type == 'Y':
                    subscription_period = timedelta(days=365)
                
                latest_payment = Payment.objects.filter(user=self.user).order_by('-expiry_date').first()
                if latest_payment and latest_payment.expiry_date > timezone.now():
                    self.expiry_date = latest_payment.expiry_date + subscription_period
                else:
                    self.expiry_date = self.date + subscription_period
            else:
                if trading_settings.subscription_type == 'M':
                    subscription_period = timedelta(days=30)
                elif trading_settings.subscription_type == 'Y':
                    subscription_period = timedelta(days=365)
                
                self.expiry_date = self.date + subscription_period
        
        super(Payment, self).save(*args, **kwargs)

class TradingSettings(models.Model):
    SUBSCRIPTION_TYPES = [
        ('M', 'Monthly'),
        ('Y', 'Yearly'),
    ]

    subscription_type = models.CharField(max_length=1, choices=SUBSCRIPTION_TYPES)
    user = models.OneToOneField(User, on_delete=models.CASCADE)

    def __str__(self):
        return f'{self.get_subscription_type_display()}'

from django import forms
from .models import Payment

class PaymentForm(forms.ModelForm):
    class Meta:
        model = Payment
        fields = ['payment_type', 'amount', 'user']

from django.shortcuts import render, redirect
from django.contrib.auth.decorators import login_required
from .models import Payment, TradingSettings
from .forms import PaymentForm
from django.utils import timezone

@login_required
def payment_form_view(request):
    if request.method == 'POST':
        form = PaymentForm(request.POST)
        if form.is_valid():
            payment = form.save(commit=False)
            
            # Calculate and set the expiry_date
            trading_settings = TradingSettings.objects.filter(user=payment.user).first()
            if trading_settings:
                if trading_settings.subscription_type == 'M':
                    subscription_period = timedelta(days=30)
                elif trading_settings.subscription_type == 'Y':
                    subscription_period = timedelta(days=365)
                
                latest_payment = Payment.objects.filter(user=payment.user).order_by('-expiry_date').first()
                if latest_payment and latest_payment.expiry_date > timezone.now():
                    payment.expiry_date = latest_payment.expiry_date + subscription_period
                else:
                    payment.expiry_date = payment.date + subscription_period
            
            payment.save()
            return redirect('payment_form')  # Redirect to the same view to display the countdown
    else:
        form = PaymentForm()
    
    # Fetch the latest payment record for the current user
    try:
        latest_payment = Payment.objects.filter(user=request.user).order_by('-date').first()
        expiry_date = latest_payment.expiry_date if latest_payment else None
    except Payment.DoesNotExist:
        expiry_date = None
    
    return render(request, 'payment_form.html', {'form': form, 'expiry_date': expiry_date})


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Payment Form</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            padding: 20px;
        }
        #countdown {
            font-size: 2em;
            color: #ff0000;
        }
        .message {
            font-size: 1.2em;
        }
    </style>
</head>
<body>
    <h1>Enter Payment Details</h1>
    
    <form method="post">
        {% csrf_token %}
        {{ form.as_p }}
        <button type="submit">Submit</button>
    </form>
    
    {% if expiry_date %}
        <h2>Subscription Expiry Countdown</h2>
        <p id="countdown">Loading...</p>
        
        <script>
            function calculateTimeRemaining(expiryDate) {
                const now = new Date().getTime();
                const endTime = new Date(expiryDate).getTime();
                const distance = endTime - now;

                if (distance < 0) {
                    return "None"; // Display "None" or suitable message if expired
                }

                const days = Math.floor(distance / (1000 * 60 * 60 * 24));
                const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
                const seconds = Math.floor((distance % (1000 * 60)) / 1000);

                return `${days}d ${hours}h ${minutes}m ${seconds}s`;
            }

            function updateCountdown() {
                const expiryDate = "{{ expiry_date|date:'Y-m-d H:i:s' }}";
                const countdownElement = document.getElementById('countdown');
                
                function refreshCountdown() {
                    countdownElement.innerHTML = calculateTimeRemaining(expiryDate);
                }

                refreshCountdown();
                setInterval(refreshCountdown, 1000);
            }

            document.addEventListener('DOMContentLoaded', updateCountdown);
        </script>
    {% else %}
        <p class="message">No active subscription found.</p>
    {% endif %}
</body>
</html>
