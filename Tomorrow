# accounts/backends.py

from django.contrib.auth.backends import BaseBackend
from .models import Accounts

class AccountsBackend(BaseBackend):
    def authenticate(self, request, username=None, password=None):
        try:
            account = Accounts.objects.get(username=username)
            if account.check_password(password):
                return account
        except Accounts.DoesNotExist:
            return None

    def get_user(self, user_id):
        try:
            return Accounts.objects.get(pk=user_id)
        except Accounts.DoesNotExist:
            return None


AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'accounts.backends.AccountsBackend',
]


# accounts/models.py

from django.db import models
from django.contrib.auth.hashers import make_password

class Accounts(models.Model):
    username = models.CharField(max_length=150, unique=True)
    email = models.EmailField(unique=True)
    password = models.CharField(max_length=128)  # Storing hashed passwords

    def set_password(self, raw_password):
        self.password = make_password(raw_password)

    def check_password(self, raw_password):
        return raw_password == self.password  # For demonstration; use Django's check_password in production

    def __str__(self):
        return self.username

# accounts/forms.py

from django import forms
from .models import Accounts

class SignupForm(forms.ModelForm):
    password = forms.CharField(widget=forms.PasswordInput)

    class Meta:
        model = Accounts
        fields = ['username', 'email', 'password']

    def save(self, commit=True):
        user = super().save(commit=False)
        user.set_password(self.cleaned_data['password'])
        if commit:
            user.save()
        return user

class LoginForm(forms.Form):
    username = forms.CharField(max_length=150)
    password = forms.CharField(widget=forms.PasswordInput)

# accounts/views.py

from django.shortcuts import render, redirect
from django.contrib.auth import authenticate, login
from .forms import LoginForm, SignupForm

def signup_view(request):
    if request.method == 'POST':
        form = SignupForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('login')  # Redirect to login page after successful signup
    else:
        form = SignupForm()
    return render(request, 'signup.html', {'form': form})

def login_view(request):
    if request.method == 'POST':
        form = LoginForm(request.POST)
        if form.is_valid():
            username = form.cleaned_data['username']
            password = form.cleaned_data['password']
            user = authenticate(request, username=username, password=password)
            if user is not None:
                login(request, user)
                return redirect('dashboard')  # Redirect to dashboard or any other page after login
    else:
        form = LoginForm()
    return render(request, 'login.html', {'form': form})

# accounts/views.py

from django.shortcuts import render, redirect
from django.contrib.auth.decorators import login_required
from .forms import LoginForm, SignupForm

@login_required
def profile_view(request):
    return render(request, 'profile.html')

<!-- accounts/templates/profile.html -->

<!DOCTYPE html>
<html>
<head>
    <title>Profile</title>
</head>
<body>
    <h2>User Profile</h2>
    <p>Welcome, {{ user.username }}!</p>
    <!-- Add more profile details here -->
</body>
</html>
