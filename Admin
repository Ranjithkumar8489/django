# admin.py

from django.contrib import admin
from django.http import HttpResponseRedirect
from django.urls import path, reverse
from django.utils.html import format_html
from .models import MyModel, Verifier

class MyModelAdmin(admin.ModelAdmin):
    list_display = ('name', 'verify_button', 'verified')

    def verify_button(self, obj):
        if not obj.verified:
            return format_html('<a class="button" href="{}">Verify</a>', 
                               reverse('admin:verify', args=[obj.pk]))
        return "Already Verified"
    verify_button.short_description = 'Verification'
    verify_button.allow_tags = True

    def get_urls(self):
        urls = super().get_urls()
        custom_urls = [
            path('verify/<int:object_id>/', self.admin_site.admin_view(self.verify_view), name='verify'),
        ]
        return custom_urls + urls

    def verify_view(self, request, object_id):
        obj = self.get_object(request, object_id)
        if obj and not obj.verified:
            # Update the MyModel instance
            obj.verified = True
            obj.save()

            # Create a Verifier instance
            Verifier.objects.create(
                my_model=obj,
                verified_by=request.user.username
            )

            self.message_user(request, "Verified successfully.")
        else:
            self.message_user(request, "Already verified or object not found.", level='error')
        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

admin.site.register(MyModel, MyModelAdmin)


# models.py

from django.conf import settings
from django.db import models

class MyModel(models.Model):
    name = models.CharField(max_length=255)
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)

    def __str__(self):
        return self.name

class Verifier(models.Model):
    my_model_name = models.CharField(max_length=255)
    verified_by = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='verifications')
    verified_at = models.DateTimeField(auto_now_add=True)
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='mymodels')

    def __str__(self):
        return f"{self.verified_by.username} verified {self.my_model_name} at {self.verified_at}"

# admin.py

from django.contrib import admin
from django.http import HttpResponseRedirect
from django.urls import path, reverse
from django.utils.html import format_html
from .models import MyModel, Verifier

class MyModelAdmin(admin.ModelAdmin):
    list_display = ('name', 'user', 'verify_button')

    def verify_button(self, obj):
        return format_html('<a class="button" href="{}">Verify</a>', 
                           reverse('admin:verify', args=[obj.pk]))
    verify_button.short_description = 'Verification'
    verify_button.allow_tags = True

    def get_urls(self):
        urls = super().get_urls()
        custom_urls = [
            path('verify/<int:object_id>/', self.admin_site.admin_view(self.verify_view), name='verify'),
        ]
        return custom_urls + urls

    def verify_view(self, request, object_id):
        obj = self.get_object(request, object_id)
        if obj:
            # Create a Verifier instance before deleting MyModel instance
            Verifier.objects.create(
                my_model_name=obj.name,
                verified_by=request.user,
                user=obj.user
            )

            # Delete the MyModel instance
            obj.delete()

            # Message to indicate success
            self.message_user(request, "Verified and deleted successfully.", level='success')
        else:
            # Message to indicate the object was not found
            self.message_user(request, "Object not found.", level='error')
        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

admin.site.register(MyModel, MyModelAdmin)

