import time
from .exchange_config import exchange_objects

def arbitrage(symbol, amount, exchanges):
    try:
        min_ask_price = float('inf')
        max_bid_price = 0
        min_ask_exchange = None
        max_bid_exchange = None

        # Find exchanges with min ask price and max bid price
        for exchange_name in exchanges:
            exchange = exchange_objects.get(exchange_name)
            if not exchange:
                print(f"Exchange '{exchange_name}' not found. Skipping.")
                continue

            # Fetch prices
            ticker = exchange.fetch_ticker(symbol)
            if not ticker:
                print(f"Failed to fetch ticker for {symbol} on {exchange_name}. Skipping.")
                continue

            bid_price = ticker['bid']
            ask_price = ticker['ask']

            if ask_price < min_ask_price:
                min_ask_price = ask_price
                min_ask_exchange = exchange_name

            if bid_price > max_bid_price:
                max_bid_price = bid_price
                max_bid_exchange = exchange_name

        if not min_ask_exchange or not max_bid_exchange:
            print("Could not find suitable exchanges for arbitrage.")
            return 0

        print(f"Buy from {min_ask_exchange} at {min_ask_price} and sell on {max_bid_exchange} at {max_bid_price}")

        # Execute buy order on exchange with min ask price
        buy_exchange = exchange_objects[min_ask_exchange]
        buy_order = buy_exchange.create_limit_buy_order(symbol, amount, min_ask_price)
        if not buy_order:
            print(f"Buy order on {min_ask_exchange} failed. Aborting arbitrage.")
            return 0

        buy_order_details = {
            'exchange': min_ask_exchange,
            'order': buy_order
        }
        print(f"Buy order placed on {min_ask_exchange} successfully.")

        # Execute sell order on exchange with max bid price
        sell_exchange = exchange_objects[max_bid_exchange]
        sell_order = sell_exchange.create_limit_sell_order(symbol, amount, max_bid_price)
        if not sell_order:
            print(f"Sell order on {max_bid_exchange} failed. Aborting arbitrage.")
            return 0

        sell_order_details = {
            'exchange': max_bid_exchange,
            'order': sell_order
        }
        print(f"Sell order placed on {max_bid_exchange} successfully.")

        # Calculate profit
        buy_total = min_ask_price * amount
        sell_total = max_bid_price * amount
        profit = sell_total - buy_total

        print("Arbitrage successful!")
        return {
            'profit': profit,
            'buy_order_details': buy_order_details,
            'sell_order_details': sell_order_details
        }

    except Exception as e:
        print(f"Error during arbitrage: {e}")
        return 0


def run_bot_continuously(symbol, amount, exchanges, interval=60):
    try:
        while True:
            result = arbitrage(symbol, amount, exchanges)
            if result:
                print(result)
            time.sleep(interval)
    except KeyboardInterrupt:
        print("Bot stopped by user.")

import threading
from django.http import JsonResponse, HttpResponse
from .arbitrage import run_bot_continuously

# Global variable to control the bot
bot_thread = None
bot_running = False

def start_bot_view(request):
    global bot_thread, bot_running
    if bot_running:
        return JsonResponse({"status": "Bot already running."})
    
    symbol = "TRX/USDT"
    amount = 500.0
    exchanges = ["binance", "kucoin", "kraken"]
    interval = 60  # Run the bot every 60 seconds
    
    bot_running = True
    bot_thread = threading.Thread(target=run_bot_continuously, args=(symbol, amount, exchanges, interval))
    bot_thread.start()
    
    return JsonResponse({"status": "Bot started."})

def stop_bot_view(request):
    global bot_running
    if not bot_running:
        return JsonResponse({"status": "Bot is not running."})
    
    bot_running = False
    if bot_thread:
        bot_thread.join()
    
    return JsonResponse({"status": "Bot stopped."})

from django.urls import path
from . import views

urlpatterns = [
    path('start_bot/', views.start_bot_view, name='start_bot'),
    path('stop_bot/', views.stop_bot_view, name='stop_bot'),
]
