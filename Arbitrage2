# trading/arbitrage.py

from .exchange_config import connect_exchanges

def find_arbitrage_opportunities(exchanges, symbol):
    order_books = {}
    for exchange_name, exchange in exchanges.items():
        order_books[exchange_name] = exchange.fetch_order_book(symbol)

    best_bid = None
    best_ask = None
    for exchange_name, order_book in order_books.items():
        bid = order_book['bids'][0][0] if order_book['bids'] else None
        ask = order_book['asks'][0][0] if order_book['asks'] else None
        if bid and (not best_bid or bid > best_bid[0]):
            best_bid = (bid, exchange_name)
        if ask and (not best_ask or ask < best_ask[0]):
            best_ask = (ask, exchange_name)

    if best_bid and best_ask and best_bid[0] > best_ask[0]:
        return {
            'buy_exchange': best_ask[1],
            'buy_price': best_ask[0],
            'sell_exchange': best_bid[1],
            'sell_price': best_bid[0],
            'profit': best_bid[0] - best_ask[0],
        }
    return None

def create_order(exchange, symbol, order_type, side, amount, price=None):
    if order_type == 'market':
        return exchange.create_market_order(symbol, side, amount)
    elif order_type == 'limit':
        return exchange.create_limit_order(symbol, side, amount, price)
    else:
        raise ValueError("Order type must be 'market' or 'limit'")

def execute_arbitrage(exchanges, symbol, amount):
    opportunity = find_arbitrage_opportunities(exchanges, symbol)
    if opportunity:
        buy_exchange = exchanges[opportunity['buy_exchange']]
        sell_exchange = exchanges[opportunity['sell_exchange']]

        buy_order = create_order(buy_exchange, symbol, 'market', 'buy', amount)
        sell_order = create_order(sell_exchange, symbol, 'market', 'sell', amount)

        return {
            'buy_order': buy_order,
            'sell_order': sell_order,
            'opportunity': opportunity
        }
    return None

# trading/views.py

from django.shortcuts import render
from .exchange_config import connect_exchanges
from .arbitrage import execute_arbitrage

def arbitrage_view(request):
    if request.method == 'POST':
        symbol = request.POST['symbol']
        exchange_list = request.POST['exchange_list'].split(',')
        amount = float(request.POST['amount'])

        exchanges = connect_exchanges(exchange_list)
        arbitrage_result = execute_arbitrage(exchanges, symbol, amount)

        return render(request, 'trading/arbitrage_result.html', {
            'arbitrage_result': arbitrage_result,
            'symbol': symbol,
            'exchange_list': exchange_list,
            'amount': amount,
        })

    return render(request, 'trading/arbitrage_form.html')

<!-- templates/trading/arbitrage_result.html -->
<h1>Arbitrage Opportunity</h1>
{% if arbitrage_result %}
    <h2>Arbitrage Details:</h2>
    <p>Buy from: {{ arbitrage_result.opportunity.buy_exchange }} at {{ arbitrage_result.opportunity.buy_price }}</p>
    <p>Sell to: {{ arbitrage_result.opportunity.sell_exchange }} at {{ arbitrage_result.opportunity.sell_price }}</p>
    <p>Profit: {{ arbitrage_result.opportunity.profit }}</p>

    <h2>Order Details:</h2>
    <h3>Buy Order:</h3>
    <p>ID: {{ arbitrage_result.buy_order.id }}</p>
    <p>Symbol: {{ arbitrage_result.buy_order.symbol }}</p>
    <p>Type: {{ arbitrage_result.buy_order.type }}</p>
    <p>Side: {{ arbitrage_result.buy_order.side }}</p>
    <p>Amount: {{ arbitrage_result.buy_order.amount }}</p>
    <p>Price: {{ arbitrage_result.buy_order.price }}</p>

    <h3>Sell Order:</h3>
    <p>ID: {{ arbitrage_result.sell_order.id }}</p>
    <p>Symbol: {{ arbitrage_result.sell_order.symbol }}</p>
    <p>Type: {{ arbitrage_result.sell_order.type }}</p>
    <p>Side: {{ arbitrage_result.sell_order.side }}</p>
    <p>Amount: {{ arbitrage_result.sell_order.amount }}</p>
    <p>Price: {{ arbitrage_result.sell_order.price }}</p>
{% else %}
    <p>No arbitrage opportunity found.</p>
{% endif %}
<a href="{% url 'arbitrage_view' %}">Back</a>
