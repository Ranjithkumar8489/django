import ccxt
import time

# Initialize the exchange
exchange = ccxt.binance({
    'apiKey': 'YOUR_API_KEY',
    'secret': 'YOUR_SECRET_KEY',
    'enableRateLimit': True
})

# Define the pairs for triangular arbitrage
pairs = {
    'pair1': 'BTC/USDT',
    'pair2': 'ETH/USDT',
    'pair3': 'BTC/ETH'
}

# Function to fetch the current order book for all pairs
def get_order_books():
    try:
        order_books = {pair_name: exchange.fetch_order_book(pair_symbol) for pair_name, pair_symbol in pairs.items()}
        return order_books
    except Exception as e:
        print(f"Error fetching order books: {e}")
        return None

# Function to check if there is an arbitrage opportunity
def calculate_arbitrage(order_books):
    try:
        # Get the best bid and ask prices for the pairs
        btc_usdt_bid = order_books['pair1']['bids'][0][0]
        btc_usdt_ask = order_books['pair1']['asks'][0][0]
        eth_usdt_bid = order_books['pair2']['bids'][0][0]
        eth_usdt_ask = order_books['pair2']['asks'][0][0]
        btc_eth_bid = order_books['pair3']['bids'][0][0]
        btc_eth_ask = order_books['pair3']['asks'][0][0]

        # Calculate cross rates
        forward_rate = btc_usdt_bid / btc_eth_ask * eth_usdt_bid
        forward_profit = forward_rate - 1

        reverse_rate = eth_usdt_ask * btc_eth_bid / btc_usdt_ask
        reverse_profit = reverse_rate - 1

        return forward_profit, reverse_profit
    except Exception as e:
        print(f"Error calculating arbitrage: {e}")
        return None, None

# Function to place an order and return the filled amount
def place_order(pair, side, amount, price):
    try:
        # Create order
        order = exchange.create_order(pair, 'limit', side, amount, price)
        print(f"Order placed: {order}")

        # Check for filled amount
        order_id = order['id']
        time.sleep(2)  # Wait for the order to be filled
        order_info = exchange.fetch_order(order_id, pair)
        filled_amount = order_info['filled']
        return filled_amount
    except Exception as e:
        print(f"Order placement failed: {e}")
        return 0

# Function to execute the arbitrage trades
def execute_arbitrage(order_books, initial_amount):
    forward_profit, reverse_profit = calculate_arbitrage(order_books)

    # Check for the best arbitrage opportunity
    if forward_profit > 0:
        print(f"Forward Arbitrage Opportunity: {forward_profit:.5f}")

        # Execute USDT -> BTC -> ETH -> USDT
        btc_usdt_price = order_books['pair1']['bids'][0][0]
        eth_usdt_price = order_books['pair2']['bids'][0][0]
        btc_eth_price = order_books['pair3']['asks'][0][0]

        # Step 1: Buy BTC with USDT
        btc_amount = place_order(pairs['pair1'], 'buy', initial_amount, btc_usdt_price)

        # Step 2: Use bought BTC to buy ETH
        if btc_amount > 0:
            eth_amount = place_order(pairs['pair3'], 'buy', btc_amount, btc_eth_price)

            # Step 3: Sell ETH back to USDT
            if eth_amount > 0:
                place_order(pairs['pair2'], 'sell', eth_amount, eth_usdt_price)

    elif reverse_profit > 0:
        print(f"Reverse Arbitrage Opportunity: {reverse_profit:.5f}")

        # Execute USDT -> ETH -> BTC -> USDT
        eth_usdt_price = order_books['pair2']['asks'][0][0]
        btc_usdt_price = order_books['pair1']['asks'][0][0]
        btc_eth_price = order_books['pair3']['bids'][0][0]

        # Step 1: Buy ETH with USDT
        eth_amount = place_order(pairs['pair2'], 'buy', initial_amount, eth_usdt_price)

        # Step 2: Use bought ETH to buy BTC
        if eth_amount > 0:
            btc_amount = place_order(pairs['pair3'], 'sell', eth_amount, btc_eth_price)

            # Step 3: Sell BTC back to USDT
            if btc_amount > 0:
                place_order(pairs['pair1'], 'sell', btc_amount, btc_usdt_price)

    else:
        print("No arbitrage opportunity found.")

# Main loop to run the arbitrage strategy
def triangular_arbitrage_loop():
    while True:
        try:
            order_books = get_order_books()
            if order_books:
                execute_arbitrage(order_books, initial_amount=50)  # Adjust initial_amount as needed
            time.sleep(5)  # Adjust sleep time to avoid rate limiting
        except Exception as e:
            print(f"Error in arbitrage loop: {e}")

# Start the arbitrage loop
triangular_arbitrage_loop()
