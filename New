async def get_pairs():
    global pairs, sym_val_j
    markets = exchange.load_markets()

    for symbol in markets:
        # Check if the market type is 'spot' and it is within the filtered symbols list
        if markets[symbol]['type'] == 'spot' and symbol in FILTERED_SYMBOLS:
            sym_val_j[symbol]  # Initialize entry

    base_symbols = set()
    quote_symbols = set()

    for symbol in sym_val_j.keys():
        base_symbols.add(symbol.split('/')[0])
        quote_symbols.add(symbol.split('/')[1])

    valid_pairs = list(sym_val_j.keys())

    for d1 in base_symbols:
        for d2 in quote_symbols:
            for d3 in base_symbols:
                if d1 != d2 and d1 != d3 and d2 != d3:
                    lv1, lv2, lv3 = [], [], []
                    l1, l2, l3 = "", "", ""
                    if f"{d1}/{d2}" in valid_pairs:
                        lv1.append(f"{d1}/{d2}")
                        l1 = "num"
                    if f"{d2}/{d1}" in valid_pairs:
                        lv1.append(f"{d2}/{d1}")
                        l1 = "den"
                    if f"{d2}/{d3}" in valid_pairs:
                        lv2.append(f"{d2}/{d3}")
                        l2 = "num"
                    if f"{d3}/{d2}" in valid_pairs:
                        lv2.append(f"{d3}/{d2}")
                        l2 = "den"
                    if f"{d3}/{d1}" in valid_pairs:
                        lv3.append(f"{d3}/{d1}")
                        l3 = "num"
                    if f"{d1}/{d3}" in valid_pairs:
                        lv3.append(f"{d1}/{d3}")
                        l3 = "den"

                    # Check if the full triangular arbitrage path exists
                    if lv1 and lv2 and lv3:
                        pairs.append({
                            'l1': l1, 'l2': l2, 'l3': l3,
                            'd1': d1, 'd2': d2, 'd3': d3,
                            'lv1': lv1[0], 'lv2': lv2[0], 'lv3': lv3[0],
                            'value': -100, 'tpath': ""
                        })

    print(f"Finished identifying all the paths. Total symbols = {len(sym_val_j)}. Total paths = {len(pairs)}")

async def execute_trade(exchange, trade_info):
    try:
        # Define the initial trading amount
        trading_amount = 0.01  # Modify as needed for trading amount

        # Execute First Trade
        if trade_info['l1'] == "num":
            print(f"Executing: Buy {trade_info['lv1']}")
            order1 = await exchange.create_order(trade_info['lv1'], 'market', 'buy', trading_amount)
        else:
            print(f"Executing: Sell {trade_info['lv1']}")
            order1 = await exchange.create_order(trade_info['lv1'], 'market', 'sell', trading_amount)

        # Wait for the first order to be filled
        order1 = await wait_for_order_filled(exchange, order1['id'], trade_info['lv1'])
        trading_amount = order1['filled']  # Update trading amount based on the filled amount

        # Execute Second Trade
        if trade_info['l2'] == "num":
            print(f"Executing: Buy {trade_info['lv2']}")
            order2 = await exchange.create_order(trade_info['lv2'], 'market', 'buy', trading_amount)
        else:
            print(f"Executing: Sell {trade_info['lv2']}")
            order2 = await exchange.create_order(trade_info['lv2'], 'market', 'sell', trading_amount)

        # Wait for the second order to be filled
        order2 = await wait_for_order_filled(exchange, order2['id'], trade_info['lv2'])
        trading_amount = order2['filled']  # Update trading amount based on the filled amount

        # Execute Third Trade
        if trade_info['l3'] == "num":
            print(f"Executing: Buy {trade_info['lv3']}")
            order3 = await exchange.create_order(trade_info['lv3'], 'market', 'buy', trading_amount)
        else:
            print(f"Executing: Sell {trade_info['lv3']}")
            order3 = await exchange.create_order(trade_info['lv3'], 'market', 'sell', trading_amount)

        # Wait for the third order to be filled
        order3 = await wait_for_order_filled(exchange, order3['id'], trade_info['lv3'])

        # Log trade completion
        print("Trade executed successfully:")
        print(f"Order 1: {order1}")
        print(f"Order 2: {order2}")
        print(f"Order 3: {order3}")

    except Exception as e:
        print(f"Error executing trade: {e}")

