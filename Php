<?php
defined('BASEPATH') OR exit('No direct script access allowed');

class ManagerController extends CI_Controller {

    public function __construct()
    {
        parent::__construct();
        $this->load->model('Manager_model'); // Load the model
    }

    // Method to display the initial view with the manager dropdown
    public function index()
    {
        $data['managers'] = $this->Manager_model->get_managers(); // Fetch all managers

        // Set default selected manager and influencer
        // These values might typically come from a database or user input for an editing form
        $data['selected_manager'] = 1; // Replace with dynamic data, e.g., from session or database
        $data['selected_influencer'] = 2; // Replace with dynamic data, e.g., from session or database

        $this->load->view('select_manager_view', $data); // Load the view with managers and default values
    }

    // Method to get influencers based on manager ID and generate HTML options
    public function get_influencers_by_manager()
    {
        $manager_id = $this->input->post('manager_id'); // Get the manager ID from POST request
        $selected_influencer = $this->input->post('selected_influencer'); // Get selected influencer ID if any

        $influencers = $this->Manager_model->get_influencers_by_manager($manager_id); // Fetch influencers

        // Generate HTML options for influencers
        $options = '<option value="">Select an influencer</option>';
        foreach ($influencers as $influencer) {
            $selected = ($influencer->id == $selected_influencer) ? ' selected="selected"' : ''; // Set selected attribute
            $options .= '<option value="' . $influencer->id . '"' . $selected . '>' . $influencer->name . '</option>';
        }

        echo $options; // Output the options HTML directly
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Select Manager and Influencer</title>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
</head>
<body>

<h1>Select a Manager and Influencer</h1>

<form action="your_form_action_url" method="post"> <!-- Replace with your form action URL -->
    <label for="manager">Choose a manager:</label>
    <select name="manager" id="manager">
        <option value="">Select a manager</option>
        <?php foreach($managers as $manager): ?>
            <option value="<?php echo $manager->id; ?>" <?php echo ($manager->id == $selected_manager) ? 'selected="selected"' : ''; ?>>
                <?php echo $manager->name; ?>
            </option>
        <?php endforeach; ?>
    </select>
    
    <br><br>

    <label for="influencer">Choose an influencer:</label>
    <select name="influencer" id="influencer">
        <option value="">Select an influencer</option>
        <!-- Options will be populated dynamically using AJAX -->
    </select>
    
    <br><br>

    <input type="submit" value="Submit">
</form>

<script type="text/javascript">
$(document).ready(function(){
    // Function to load influencers based on the selected manager
    function loadInfluencers(manager_id, selected_influencer) {
        if (manager_id != '') { // Check if a manager is selected
            $.ajax({
                url: "<?php echo base_url('ManagerController/get_influencers_by_manager'); ?>", // URL to fetch influencers
                method: "POST",
                data: {manager_id: manager_id, selected_influencer: selected_influencer}, // Send manager ID and selected influencer to the server
                success: function(data){
                    $('#influencer').html(data); // Set the returned options HTML directly
                }
            });
        } else {
            $('#influencer').html('<option value="">Select an influencer</option>'); // Reset if no manager is selected
        }
    }

    // Trigger AJAX when manager is selected
    $('#manager').change(function(){
        var manager_id = $(this).val(); // Get the selected manager ID
        loadInfluencers(manager_id, ""); // Load influencers without a pre-selected value
    });

    // On page load, check if a manager is already selected and load its influencers
    var preselected_manager_id = $('#manager').val(); // Get the pre-selected manager ID
    var preselected_influencer_id = "<?php echo isset($selected_influencer) ? $selected_influencer : ''; ?>"; // Get the pre-selected influencer ID

    if (preselected_manager_id != '') {
        loadInfluencers(preselected_manager_id, preselected_influencer_id); // Load influencers with pre-selected value
    }
});
</script>

</body>
</html>



<?php
defined('BASEPATH') OR exit('No direct script access allowed');

class DateController extends CI_Controller {

    public function __construct() {
        parent::__construct();
        $this->load->helper(array('form', 'url'));
        $this->load->library('form_validation');
    }

    public function index() {
        // Load the form view
        $this->load->view('date_form');
    }

    public function submit_dates() {
        // Get the selected date option
        $date_option = $this->input->post('date_option');

        // Set validation rules based on the selected option
        if ($date_option === 'custom') {
            $this->form_validation->set_rules('start_date', 'Start Date', 'required');
            $this->form_validation->set_rules('end_date', 'End Date', 'required|callback_check_end_date');
        }

        if ($this->form_validation->run() == FALSE) {
            // If validation fails, reload the form with error messages
            $this->load->view('date_form');
        } else {
            // If validation succeeds, process the form data (e.g., save to database)
            $data['date_option'] = $date_option;
            $data['start_date'] = $this->input->post('start_date');
            $data['end_date'] = $this->input->post('end_date');

            // Load a success view with date data
            $this->load->view('success', $data);
        }
    }

    // Custom validation callback to check if end date is after start date
    public function check_end_date($end_date) {
        $start_date = $this->input->post('start_date');

        // Check if end date is after start date
        if (strtotime($end_date) < strtotime($start_date)) {
            $this->form_validation->set_message('check_end_date', 'The End Date must be after the Start Date.');
            return FALSE;
        }
        return TRUE;
    }
}

<!DOCTYPE html>
<html>
<head>
    <title>Date Form</title>
    <script>
        function toggleDateFields() {
            var dateOption = document.getElementById("date_option").value;
            var customDateFields = document.getElementById("custom_date_fields");

            if (dateOption === "custom") {
                customDateFields.style.display = "block";
            } else {
                customDateFields.style.display = "none";
            }
        }
    </script>
    <style>
        .error {
            color: red;
            margin-bottom: 10px;
        }
    </style>
</head>
<body>
    <h2>Date Form</h2>

    <!-- Form -->
    <?php echo form_open('datecontroller/submit_dates'); ?>
        <p>
            <label for="date_option">Select Date Range:</label>
            <select name="date_option" id="date_option" onchange="toggleDateFields()">
                <option value="today" <?php echo set_select('date_option', 'today'); ?>>Today</option>
                <option value="last_week" <?php echo set_select('date_option', 'last_week'); ?>>Last Week</option>
                <option value="custom" <?php echo set_select('date_option', 'custom'); ?>>Custom Date Range</option>
            </select>
        </p>

        <div id="custom_date_fields" style="display: none;">
            <p>
                <!-- Display error for start date -->
                <?php if (form_error('start_date')): ?>
                    <div class="error"><?php echo form_error('start_date'); ?></div>
                <?php endif; ?>
                <label for="start_date">Start Date:</label>
                <input type="date" name="start_date" id="start_date" value="<?php echo set_value('start_date'); ?>">
            </p>
            <p>
                <!-- Display error for end date -->
                <?php if (form_error('end_date')): ?>
                    <div class="error"><?php echo form_error('end_date'); ?></div>
                <?php endif; ?>
                <label for="end_date">End Date:</label>
                <input type="date" name="end_date" id="end_date" value="<?php echo set_value('end_date'); ?>">
            </p>
        </div>

        <p>
            <input type="submit" value="Submit">
        </p>
    <?php echo form_close(); ?>

    <script>
        // Set the display state of custom date fields based on the selected option
        document.addEventListener('DOMContentLoaded', function() {
            toggleDateFields(); // Initialize on page load based on the saved value
        });
    </script>
</body>
</html>
